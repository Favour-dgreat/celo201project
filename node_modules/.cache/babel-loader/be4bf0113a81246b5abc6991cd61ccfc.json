{"ast":null,"code":"export function assertType(obj, key) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"string\";\n\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\nexport function hasRequiredParams(params, required) {\n  let matches = true;\n  required.forEach(key => {\n    const exists = (key in params);\n\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\nexport function hasExactParamsLength(params, length) {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n  return Array.isArray(params) ? params.length >= minLength : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n  const exact = !optional.length;\n  const matchesLength = exact ? hasExactParamsLength(params, required.length) : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected) {\n  let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}","map":{"version":3,"sources":["../../src/misc.ts"],"names":[],"mappings":"AAAA,OAAM,SAAU,UAAV,CAAqB,GAArB,EAA+B,GAA/B,EAA2D;AAAA,MAAf,IAAe,uEAAR,QAAQ;;AAC/D,MAAI,CAAC,GAAG,CAAC,GAAD,CAAJ,IAAa,OAAO,GAAG,CAAC,GAAD,CAAV,KAAoB,IAArC,EAA2C;AACzC,UAAM,IAAI,KAAJ,CAAU,uBAAuB,GAAG,SAApC,CAAN;AACD;AACF;AAED,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAAyC,QAAzC,EAA2D;AAC/D,MAAI,OAAO,GAAG,IAAd;AACA,EAAA,QAAQ,CAAC,OAAT,CAAiB,GAAG,IAAG;AACrB,UAAM,MAAM,IAAG,GAAG,IAAI,MAAV,CAAZ;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,MAAA,OAAO,GAAG,KAAV;AACD;AACF,GALD;AAMA,SAAO,OAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,MAA/B,EAA4C,MAA5C,EAA0D;AAC9D,SAAO,KAAK,CAAC,OAAN,CAAc,MAAd,IACH,MAAM,CAAC,MAAP,KAAkB,MADf,GAEH,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,KAA+B,MAFnC;AAGD;AAED,OAAM,SAAU,uBAAV,CACJ,MADI,EAEJ,SAFI,EAEa;AAEjB,SAAO,KAAK,CAAC,OAAN,CAAc,MAAd,IACH,MAAM,CAAC,MAAP,IAAiB,SADd,GAEH,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,IAA8B,SAFlC;AAGD;AAED,OAAM,SAAU,WAAV,CACJ,MADI,EAEJ,QAFI,EAGJ,QAHI,EAGc;AAElB,QAAM,KAAK,GAAG,CAAC,QAAQ,CAAC,MAAxB;AACA,QAAM,aAAa,GAAG,KAAK,GACvB,oBAAoB,CAAC,MAAD,EAAS,QAAQ,CAAC,MAAlB,CADG,GAEvB,uBAAuB,CAAC,MAAD,EAAS,QAAQ,CAAC,MAAlB,CAF3B;AAGA,MAAI,CAAC,aAAL,EAAoB,OAAO,KAAP;AACpB,SAAO,iBAAiB,CAAC,MAAD,EAAS,QAAT,CAAxB;AACD;AAED,OAAM,SAAU,cAAV,CACJ,MADI,EAEJ,QAFI,EAGW;AAAA,MAAf,SAAe,uEAAH,GAAG;AAEf,QAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,SAAb,CAAd;AACA,SACE,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,CAAwB,IAAxB,GAA+B,WAA/B,OACA,QAAQ,CAAC,IAAT,GAAgB,WAAhB,EAFF;AAID","sourceRoot":"","sourcesContent":["export function assertType(obj, key, type = \"string\") {\n    if (!obj[key] || typeof obj[key] !== type) {\n        throw new Error(`Missing or invalid \"${key}\" param`);\n    }\n}\nexport function hasRequiredParams(params, required) {\n    let matches = true;\n    required.forEach(key => {\n        const exists = key in params;\n        if (!exists) {\n            matches = false;\n        }\n    });\n    return matches;\n}\nexport function hasExactParamsLength(params, length) {\n    return Array.isArray(params)\n        ? params.length === length\n        : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n    return Array.isArray(params)\n        ? params.length >= minLength\n        : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n    const exact = !optional.length;\n    const matchesLength = exact\n        ? hasExactParamsLength(params, required.length)\n        : hasRequiredParamsLength(params, required.length);\n    if (!matchesLength)\n        return false;\n    return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected, separator = \"_\") {\n    const split = method.split(separator);\n    return (split[split.length - 1].trim().toLowerCase() ===\n        expected.trim().toLowerCase());\n}\n//# sourceMappingURL=misc.js.map"]},"metadata":{},"sourceType":"module"}