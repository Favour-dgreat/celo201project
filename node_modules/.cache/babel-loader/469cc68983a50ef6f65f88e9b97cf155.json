{"ast":null,"code":"import * as encoding from \"@walletconnect/encoding\";\nimport { generateChildLogger, getLoggerContext } from \"@walletconnect/logger\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { ENCODER_CONTEXT } from \"../constants\";\nexport class Encoder {\n  constructor(client, logger) {\n    this.client = client;\n    this.logger = logger;\n    this.name = ENCODER_CONTEXT;\n    this.client = client;\n    this.logger = generateChildLogger(logger, this.name);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  async encode(topic, payload) {\n    const message = safeJsonStringify(payload);\n    const hasKeys = await this.client.crypto.hasKeys(topic);\n    const result = hasKeys ? await this.client.crypto.encrypt(topic, message) : encoding.utf8ToHex(message);\n    return result;\n  }\n\n  async decode(topic, encrypted) {\n    const hasKeys = await this.client.crypto.hasKeys(topic);\n    const message = hasKeys ? await this.client.crypto.decrypt(topic, encrypted) : encoding.hexToUtf8(encrypted);\n    const payload = safeJsonParse(message);\n    return payload;\n  }\n\n}\nexport class RelayerEncoder {\n  async encode(topic, payload) {\n    return encoding.utf8ToHex(safeJsonStringify(payload));\n  }\n\n  async decode(topic, message) {\n    return safeJsonParse(encoding.hexToUtf8(message));\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/encoder.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,QAAZ,MAA0B,yBAA1B;AACA,SAAS,mBAAT,EAA8B,gBAA9B,QAAsD,uBAAtD;AAEA,SAAS,aAAT,EAAwB,iBAAxB,QAAiD,0BAAjD;AAGA,SAAS,eAAT,QAAgC,cAAhC;AAEA,OAAM,MAAO,OAAP,CAAc;AAGlB,EAAA,WAAA,CAAmB,MAAnB,EAA2C,MAA3C,EAAyD;AAAtC,SAAA,MAAA,GAAA,MAAA;AAAwB,SAAA,MAAA,GAAA,MAAA;AAFpC,SAAA,IAAA,GAAe,eAAf;AAGL,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,MAAL,GAAc,mBAAmB,CAAC,MAAD,EAAS,KAAK,IAAd,CAAjC;AACD;;AAEU,MAAP,OAAO,GAAA;AACT,WAAO,gBAAgB,CAAC,KAAK,MAAN,CAAvB;AACD;;AAEkB,QAAN,MAAM,CAAC,KAAD,EAAgB,OAAhB,EAAuC;AACxD,UAAM,OAAO,GAAG,iBAAiB,CAAC,OAAD,CAAjC;AACA,UAAM,OAAO,GAAG,MAAM,KAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,CAA2B,KAA3B,CAAtB;AACA,UAAM,MAAM,GAAG,OAAO,GAClB,MAAM,KAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,CAA2B,KAA3B,EAAkC,OAAlC,CADY,GAElB,QAAQ,CAAC,SAAT,CAAmB,OAAnB,CAFJ;AAGA,WAAO,MAAP;AACD;;AAEkB,QAAN,MAAM,CAAC,KAAD,EAAgB,SAAhB,EAAiC;AAClD,UAAM,OAAO,GAAG,MAAM,KAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,CAA2B,KAA3B,CAAtB;AACA,UAAM,OAAO,GAAG,OAAO,GACnB,MAAM,KAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,CAA2B,KAA3B,EAAkC,SAAlC,CADa,GAEnB,QAAQ,CAAC,SAAT,CAAmB,SAAnB,CAFJ;AAGA,UAAM,OAAO,GAAG,aAAa,CAAC,OAAD,CAA7B;AACA,WAAO,OAAP;AACD;;AA5BiB;AA+BpB,OAAM,MAAO,cAAP,CAAqB;AACN,QAAN,MAAM,CAAC,KAAD,EAAgB,OAAhB,EAAuC;AACxD,WAAO,QAAQ,CAAC,SAAT,CAAmB,iBAAiB,CAAC,OAAD,CAApC,CAAP;AACD;;AAEkB,QAAN,MAAM,CAAC,KAAD,EAAgB,OAAhB,EAA+B;AAChD,WAAO,aAAa,CAAC,QAAQ,CAAC,SAAT,CAAmB,OAAnB,CAAD,CAApB;AACD;;AAPwB","sourceRoot":"","sourcesContent":["import * as encoding from \"@walletconnect/encoding\";\nimport { generateChildLogger, getLoggerContext } from \"@walletconnect/logger\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { ENCODER_CONTEXT } from \"../constants\";\nexport class Encoder {\n    constructor(client, logger) {\n        this.client = client;\n        this.logger = logger;\n        this.name = ENCODER_CONTEXT;\n        this.client = client;\n        this.logger = generateChildLogger(logger, this.name);\n    }\n    get context() {\n        return getLoggerContext(this.logger);\n    }\n    async encode(topic, payload) {\n        const message = safeJsonStringify(payload);\n        const hasKeys = await this.client.crypto.hasKeys(topic);\n        const result = hasKeys\n            ? await this.client.crypto.encrypt(topic, message)\n            : encoding.utf8ToHex(message);\n        return result;\n    }\n    async decode(topic, encrypted) {\n        const hasKeys = await this.client.crypto.hasKeys(topic);\n        const message = hasKeys\n            ? await this.client.crypto.decrypt(topic, encrypted)\n            : encoding.hexToUtf8(encrypted);\n        const payload = safeJsonParse(message);\n        return payload;\n    }\n}\nexport class RelayerEncoder {\n    async encode(topic, payload) {\n        return encoding.utf8ToHex(safeJsonStringify(payload));\n    }\n    async decode(topic, message) {\n        return safeJsonParse(encoding.hexToUtf8(message));\n    }\n}\n//# sourceMappingURL=encoder.js.map"]},"metadata":{},"sourceType":"module"}