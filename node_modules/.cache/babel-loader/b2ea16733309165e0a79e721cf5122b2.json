{"ast":null,"code":"var _jsxFileName = \"/Users/dgreat/Gtas/celo201project/src/components/minter/nfts/Add.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\"; // basic attributes that can be added to NFT\n// const METAL = [\"Gold\", \"Pearl\", \"Brass\", \"Stainless steel\", \"Titanium\"];\n// const GLASS = [\"Mineral Glass\", \"Plexi\", \"Sapphire\"];\n// const WATCH_MOVEMENT = [\"Quartz\", \"Automatic\", \"Mechanical\"]\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddNfts = _ref => {\n  _s();\n\n  let {\n    save,\n    address\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\"); //store attributes of an NFT\n  // const [attributes, setAttributes] = useState([]);\n\n  const [show, setShow] = useState(false); // check if all form data has been filled\n\n  const isFormFilled = () => {\n    return name && ipfsImage && description;\n  }; // close the popup modal\n\n\n  const handleClose = () => {\n    setShow(false); // setAttributes([]);\n  }; // display the popup modal\n\n\n  const handleShow = () => setShow(true); // add an attribute to an NFT\n  // const setAttributesFunc = (e, trait_type) => {\n  //   const {value} = e.target;\n  //   const attributeObject = {\n  //     trait_type,\n  //     value,\n  //   };\n  //   const arr = attributes;\n  //   // check if attribute already exists\n  //   const index = arr.findIndex((el) => el.trait_type === trait_type);\n  //   if (index >= 0) {\n  //     // update the existing attribute\n  //     arr[index] = {\n  //       trait_type,\n  //       value,\n  //     };\n  //     setAttributes(arr);\n  //     return;\n  //   }\n  //   // add a new attribute\n  //   setAttributes((oldArray) => [...oldArray, attributeObject]);\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleShow,\n      variant: \"dark\",\n      className: \"rounded-pill px-0\",\n      style: {\n        width: \"38px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-plus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Create NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FloatingLabel, {\n            controlId: \"inputLocation\",\n            label: \"Name\",\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Name of NFT\",\n              onChange: e => {\n                setName(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FloatingLabel, {\n            controlId: \"inputDescription\",\n            label: \"Description\",\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              placeholder: \"description\",\n              style: {\n                height: \"80px\"\n              },\n              onChange: e => {\n                setDescription(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"file\",\n            className: \"mb-3\",\n            onChange: async e => {\n              const imageUrl = await uploadToIpfs(e);\n\n              if (!imageUrl) {\n                alert(\"failed to upload image\");\n                return;\n              }\n\n              setIpfsImage(imageUrl);\n            },\n            placeholder: \"Product name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          disabled: !isFormFilled(),\n          onClick: () => {\n            save({\n              name,\n              ipfsImage,\n              description,\n              ownerAddress: address\n            });\n            handleClose();\n          },\n          children: \"Create NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddNfts, \"htBYfCsi4ORVT8BIOfEwRdvweB8=\");\n\n_c = AddNfts;\nAddNfts.propTypes = {\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired\n};\nexport default AddNfts;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNfts\");","map":{"version":3,"sources":["/Users/dgreat/Gtas/celo201project/src/components/minter/nfts/Add.js"],"names":["React","useState","PropTypes","Button","Modal","Form","FloatingLabel","uploadToIpfs","AddNfts","save","address","name","setName","ipfsImage","setIpfsImage","description","setDescription","show","setShow","isFormFilled","handleClose","handleShow","width","e","target","value","height","imageUrl","alert","ownerAddress","propTypes","func","isRequired","string"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\n// basic attributes that can be added to NFT\n// const METAL = [\"Gold\", \"Pearl\", \"Brass\", \"Stainless steel\", \"Titanium\"];\n// const GLASS = [\"Mineral Glass\", \"Plexi\", \"Sapphire\"];\n// const WATCH_MOVEMENT = [\"Quartz\", \"Automatic\", \"Mechanical\"]\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  //store attributes of an NFT\n  // const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n\n  // check if all form data has been filled\n  const isFormFilled = () =>{\n   return name && ipfsImage && description;\n  }\n      \n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    // setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  // const setAttributesFunc = (e, trait_type) => {\n  //   const {value} = e.target;\n  //   const attributeObject = {\n  //     trait_type,\n  //     value,\n  //   };\n  //   const arr = attributes;\n\n  //   // check if attribute already exists\n  //   const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n  //   if (index >= 0) {\n\n  //     // update the existing attribute\n  //     arr[index] = {\n  //       trait_type,\n  //       value,\n  //     };\n  //     setAttributes(arr);\n  //     return;\n  //   }\n\n  //   // add a new attribute\n  //   setAttributes((oldArray) => [...oldArray, attributeObject]);\n  // };\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n            {/* <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"materials\");\n              }}\n              placeholder=\"Materials\"\n            >\n              <option hidden>Materials</option>\n              {METAL.map((metal) => (\n                <option\n                  key={`materials-${metal.toLowerCase()}`}\n                  value={metal.toLowerCase()}\n                >\n                  {metal}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"movement\");\n              }}\n              placeholder=\"Watch Movement\"\n            >\n              <option hidden>Movement</option>\n              {WATCH_MOVEMENT.map((movement) => (\n                <option\n                  key={`movement-${movement.toLowerCase()}`}\n                  value={movement.toLowerCase()}\n                >\n                  {movement}\n                </option>\n              ))}\n            </Form.Control>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"glass\");\n              }}\n              placeholder=\"Watch Glass\"\n            >\n              <option hidden>Glass</option>\n              {GLASS.map((glass) => (\n                <option\n                  key={`glass-${glass.toLowerCase()}`}\n                  value={glass.toLowerCase()}\n                >\n                  {glass}\n                </option>\n              ))}\n            </Form.Control> */}\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                ipfsImage,\n                description,\n                ownerAddress: address\n              });\n              handleClose();\n            }}\n            >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n"]},"metadata":{},"sourceType":"module"}