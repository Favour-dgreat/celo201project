{"ast":null,"code":"var _jsxFileName = \"/Users/dgreat/Gtas/celo201project/src/components/minter/nfts/index.js\",\n    _s = $RefreshSig$();\n\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport { getNfts, createNft, fetchNftContractOwner, transferOwnership, getOwners } from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NftList = _ref => {\n  _s();\n\n  let {\n    minterContract,\n    name\n  } = _ref;\n\n  /* performActions : used to run smart contract interactions in order\n   *  address : fetch the address of the connected wallet\n   */\n  const {\n    performActions,\n    address,\n    kit\n  } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n  const {\n    defaultAccount\n  } = kit;\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true); // fetch all nfts from the smart contract\n\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({\n        error\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async data => {\n    try {\n      setLoading(true); // create an nft functionality\n\n      await createNft(minterContract, performActions, data);\n      toast( /*#__PURE__*/_jsxDEV(NotificationSuccess, {\n        text: \"Updating NFT list....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this));\n      getAssets();\n    } catch (error) {\n      console.log({\n        error\n      });\n      toast( /*#__PURE__*/_jsxDEV(NotificationError, {\n        text: \"Failed to create an NFT.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendNft = async (address, tokenId, owner) => {\n    try {\n      setLoading(true);\n      await transferOwnership(minterContract, owner, address, tokenId, performActions);\n      toast( /*#__PURE__*/_jsxDEV(NotificationSuccess, {\n        text: \"Updating NFT list....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this));\n      getAssets();\n    } catch (error) {\n      console.log({\n        error\n      });\n      toast( /*#__PURE__*/_jsxDEV(NotificationError, {\n        text: \"Failed to send NFT.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async minterContract => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n\n    setNftOwner(_address);\n  }, []);\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n\n  if (address) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"fs-4 fw-bold mb-0\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AddNfts, {\n            save: addNft,\n            address: address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          xs: 1,\n          sm: 2,\n          lg: 3,\n          className: \"g-3  mb-5 g-xl-4 g-xxl-5\",\n          children: nfts.map(_nft => /*#__PURE__*/_jsxDEV(Nft, {\n            contractOwner: defaultAccount,\n            send: sendNft,\n            nft: { ..._nft\n            }\n          }, _nft.index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n\n  return null;\n};\n\n_s(NftList, \"ZBQM3zkrcgbbAdlTMOu2uIzmuJQ=\", false, function () {\n  return [useContractKit];\n});\n\n_c = NftList;\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired\n};\nNftList.defaultProps = {\n  minterContract: null\n};\nexport default NftList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftList\");","map":{"version":3,"sources":["/Users/dgreat/Gtas/celo201project/src/components/minter/nfts/index.js"],"names":["useContractKit","React","useEffect","useState","useCallback","toast","PropTypes","AddNfts","Nft","Loader","NotificationSuccess","NotificationError","getNfts","createNft","fetchNftContractOwner","transferOwnership","getOwners","Row","NftList","minterContract","name","performActions","address","kit","nfts","setNfts","loading","setLoading","nftOwner","setNftOwner","defaultAccount","getAssets","allNfts","error","console","log","addNft","data","sendNft","tokenId","owner","fetchContractOwner","_address","map","_nft","index","propTypes","instanceOf","Object","updateBalance","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  fetchNftContractOwner,\n  transferOwnership,\n  getOwners\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, name }) => {\n  /* performActions : used to run smart contract interactions in order\n   *  address : fetch the address of the connected wallet\n   */\n  const { performActions, address, kit } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n  const  {defaultAccount} = kit;\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // fetch all nfts from the smart contract\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendNft = async (address, tokenId, owner)=>{\n    try {\n      setLoading(true);\n      await transferOwnership(minterContract,owner, address, tokenId, performActions)\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to send NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n\n              <AddNfts save={addNft} address={address} />\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n          \n              {/* display all NFTs */}\n              {nfts.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  contractOwner = {defaultAccount}\n                  send = {sendNft}\n                  nft={{\n                    ..._nft,\n                  }}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;\n"]},"metadata":{},"sourceType":"module"}